// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	customcontrollerv1 "github.com/Rakibul-Hossain/apiserver-custom-controller/pkg/apis/customcontroller/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCustoms implements CustomInterface
type FakeCustoms struct {
	Fake *FakeCustomcontrollerV1
	ns   string
}

var customsResource = schema.GroupVersionResource{Group: "customcontroller.com", Version: "v1", Resource: "customs"}

var customsKind = schema.GroupVersionKind{Group: "customcontroller.com", Version: "v1", Kind: "Custom"}

// Get takes name of the custom, and returns the corresponding custom object, and an error if there is any.
func (c *FakeCustoms) Get(ctx context.Context, name string, options v1.GetOptions) (result *customcontrollerv1.Custom, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(customsResource, c.ns, name), &customcontrollerv1.Custom{})

	if obj == nil {
		return nil, err
	}
	return obj.(*customcontrollerv1.Custom), err
}

// List takes label and field selectors, and returns the list of Customs that match those selectors.
func (c *FakeCustoms) List(ctx context.Context, opts v1.ListOptions) (result *customcontrollerv1.CustomList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(customsResource, customsKind, c.ns, opts), &customcontrollerv1.CustomList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &customcontrollerv1.CustomList{ListMeta: obj.(*customcontrollerv1.CustomList).ListMeta}
	for _, item := range obj.(*customcontrollerv1.CustomList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested customs.
func (c *FakeCustoms) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(customsResource, c.ns, opts))

}

// Create takes the representation of a custom and creates it.  Returns the server's representation of the custom, and an error, if there is any.
func (c *FakeCustoms) Create(ctx context.Context, custom *customcontrollerv1.Custom, opts v1.CreateOptions) (result *customcontrollerv1.Custom, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(customsResource, c.ns, custom), &customcontrollerv1.Custom{})

	if obj == nil {
		return nil, err
	}
	return obj.(*customcontrollerv1.Custom), err
}

// Update takes the representation of a custom and updates it. Returns the server's representation of the custom, and an error, if there is any.
func (c *FakeCustoms) Update(ctx context.Context, custom *customcontrollerv1.Custom, opts v1.UpdateOptions) (result *customcontrollerv1.Custom, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(customsResource, c.ns, custom), &customcontrollerv1.Custom{})

	if obj == nil {
		return nil, err
	}
	return obj.(*customcontrollerv1.Custom), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeCustoms) UpdateStatus(ctx context.Context, custom *customcontrollerv1.Custom, opts v1.UpdateOptions) (*customcontrollerv1.Custom, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(customsResource, "status", c.ns, custom), &customcontrollerv1.Custom{})

	if obj == nil {
		return nil, err
	}
	return obj.(*customcontrollerv1.Custom), err
}

// Delete takes name of the custom and deletes it. Returns an error if one occurs.
func (c *FakeCustoms) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(customsResource, c.ns, name), &customcontrollerv1.Custom{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCustoms) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(customsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &customcontrollerv1.CustomList{})
	return err
}

// Patch applies the patch and returns the patched custom.
func (c *FakeCustoms) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *customcontrollerv1.Custom, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(customsResource, c.ns, name, pt, data, subresources...), &customcontrollerv1.Custom{})

	if obj == nil {
		return nil, err
	}
	return obj.(*customcontrollerv1.Custom), err
}
